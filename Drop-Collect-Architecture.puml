@startuml
!include <awslib/AWSCommon>
!include <awslib/general/all.puml>
!include <awslib/GroupIcons/all.puml>
!include <awslib/Storage/all.puml>
!include <awslib/Database/all.puml>
!include <awslib/Compute/all.puml>
!include <awslib/Mobile/all.puml>
!include <awslib/Analytics/all.puml>
!include <tupadr3/common.puml>
!include <tupadr3/font-awesome-5/mobile_alt.puml>
!include <material/common>
!include <material/file_document>
!include <material/alert>
!include <material/application>

/' left to right direction '/
skinparam linetype polyline
title **High Level View of Overall Architecture for SPM**


/' FA5_MOBILE_ALT(mobDevice, "PJE Device",node) #white { '/
MobileClient(mobDevice, "PJE Device","") {
  'General(pJE, "PJE", "sends transactions")
  /' MA_APPLICATION(darkslategrey,1,pJE,rectangle,"PJE App") #white { '/
  package "PJE" as pJE #white {
  MA_APPLICATION(darkslategrey,1,pJETransactions, rectangle, "Transactions") #white
  MA_APPLICATION(darkslategrey,1,pJEDispatch, rectangle, "Dispatch App") #white
}
}
together {
  'database "MDM\nData" as mdmdb #white
  GenericDatabase(mdmdb, "MDM\nData", " ")
  General(MDMExtracts, "MDM Extracts", " ")
  General(cFSFileDump,"CFS File Dump", " ")
}
/' General(PZExtracts, "PayZone", " ") '/
rectangle "SPM / AWS" as sPM #white {
together {
  APIGateway(transactionsApi, "Transactions API", " ")
  APIGateway(dispatchApi, "Dispatch API", " ")
}
package "SPM Integration Services" as MDMTransAttrSpecs #white {
together {
package "File Ingestion" as fileIngestionPkg #white {
  Lambda(mDMFileIngestion, "MDM", "Lambda")
  /' Lambda(pZFileIngestion, "PayZone", "Lambda") '/
}
}
package "Reference Data" as refDataPkg #white {

together {
  SimpleStorageServiceS3(fileDump, "File Dump", "S3")
  Lambda(fileValidation,"Validate Files", " ")
  SimpleStorageServiceS3(fileErrors, "Error Log Files", " ")
  rectangle "<color:darkslategrey><$ma_alert></color>\nAlerts" as noFileAlert #white
}

Lambda(extractCFS,"CFS Extract", " ")
/' Lambda(extractItem,"Item Extract", " ") '/
/' rectangle "<color:darkslategrey><$ma_file_document></color>\nMDM Item\nEvent Specs" as MDMItemSpecs #white '/
Lambda(queryItem, "Get Items/Products", " ")
Lambda(queryLocation, "Get Locations", " ")
}
package "Transactions Data" #white {
  DynamoDB(transactionsDb,"Transactions DB", " ")
  Lambda(transactionsStream, "Get Transactions", " ")
  KinesisDataFirehose(transactionsFirehose, "ETL Transactions", " ")
  SimpleStorageServiceS3(dailyTransactionsDump, "Daily Transactions", " ")
  Glue(glueTransactions, "Transform for Athena", " ")
  GlueDataCatalog(glueTransactionsCatalog, "Transactions\nTransformation Catalog", " ")
  Athena(queryTransactions, "Transactions Query Database", " ")
}
Lambda(cFSDailyFeed, "Create CFS Daily Files", " ")
package "Dispatch" #white {
  DynamoDB(dispatchDb, "Dispatch DB", " ")
  Lambda(dispatchStream, "Get Parcels for Dispatch", " ")
  Lambda(trackingSteam, "RM Parcels to Track", " ")
}
}
}
APIGateway(rMTTApi,"Royal Mail\nTrack & Trace API", " ")
' ***********
' Flows
mdmdb - MDMExtracts
/' PZExtracts --> pZFileIngestion :Reconciliation '/
MDMExtracts --> mDMFileIngestion
mDMFileIngestion --> fileDump
fileDump <--> fileValidation
fileValidation --> fileErrors
extractCFS -> fileDump
queryItem-> fileDump
queryLocation -> fileDump
pJETransactions <--> transactionsApi
transactionsApi <-> transactionsDb 
transactionsDb -> transactionsStream :Stream
transactionsStream -up-> transactionsFirehose
transactionsFirehose -> dailyTransactionsDump
dailyTransactionsDump -> glueTransactions
glueTransactions -> queryTransactions
glueTransactionsCatalog -> glueTransactions
pJEDispatch<--> dispatchApi
dispatchApi <--> dispatchDb
transactionsDb -down-> dispatchStream :Stream
dispatchStream -> dispatchDb
dispatchDb -> trackingSteam
trackingSteam -> rMTTApi
cFSDailyFeed <-> queryTransactions
cFSDailyFeed -> cFSFileDump
/' extractItem --> fileDump '/
/' extractItem -- MDMItemSpecs '/
/' extractTrans --> fileDump '/
/' extractTrans -- MDMTransAttrSpecs '/
fileValidation -> noFileAlert

@enduml
