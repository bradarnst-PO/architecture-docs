@startuml
!include <awslib/AWSCommon.puml>
!include <awslib/Analytics/all.puml>
!include <awslib/ApplicationIntegration/all.puml>
!include <awslib/Compute/all.puml>
!include <awslib/CustomerEngagement/all.puml>
!include <awslib/Database/all.puml>
!include <awslib/EndUserComputing/all.puml>
!include <awslib/general/all.puml>
!include <awslib/GroupIcons/all.puml>
!include <awslib/Storage/all.puml>
!include <awslib/Mobile/all.puml>
!include <material/common>
!include <material/file_document>
!include <material/alert>
!include <material/application>
!include <tupadr3/common.puml>

!theme aws-orange
skinparam backgroundColor white
/' top to bottom direction '/
/' left to right direction '/
/' skinparam linetype polyline '/
skinparam ArrowThickness 2
title MDM Data Flow - Initial Change Through SPM

Users(businessDataChange, "MDM Changes From Business", " ")
User(enterMDMData, "Enter MDM Data Changes", " ")
User(approveMDMData, "MDM Data Change Approval", " ")
together {
  General(mDMUI, "MDM Data Entry", " ")
  GenericDatabase(mDMdb, "MDM\nData", " ")
  General(mDMETL, "MDM ETL", " ")
}
rectangle "Accenture Azure Tennant" {
  MA_APPLICATION(darkslategrey,1,aFTG, rectangle, "SAP Data Gateway\n(AFTG)") 
}
rectangle "SPM" as sPM {
  Users(reFDataOpsTeam, "Reference Data\nOps Team", " ")
  /' rectangle "SPM / AWS" as sPMAWS  { '/
  General(sPMAWS, "SPM / AWS", " ") {
    package "SPM Integration Services" as MDMTransAttrSpecs  {
      package "File Ingestion" as fileIngestionPkg  {
        Lambda(mDMFileIngestion, "MDM", "Lambda")
        /' Lambda(pZFileIngestion, "PayZone", "Lambda") '/
      }
      package "Reference Data" as refDataPkg  {
        package "Dump MDM CSV Files" as mDMFileDump {
          SimpleStorageServiceS3(mDMCSVBucket, "MDM CSV Files", "S3")
          Lambda(validateMDMFiless,"Validate Files", " ")
          SimpleStorageServiceS3(mDMFileErrors, "Error Log Files", " ")
          /' rectangle "<color:darkslategrey><$ma_alert></color>\nAlerts" as mDMFileAlert '/ 
          SESEmail(mDMFileAlert, "Alerts", " ")
        }
        Lambda(extractCFS,"CFS Extract", " ")
        /' Lambda(extractItem,"Item Extract", " ") '/
        /' rectangle "<color:darkslategrey><$ma_file_document></color>\nMDM Item\nEvent Specs" as MDMItemSpecs  '/
        together {
          Lambda(queryItem, "Get Items", " ")
          SQSQueue(itemEventQ,"Item Event", " ")
        }
        together {
          Lambda(queryLocation, "Get Locations", " ")
          SQSQueue(locationEventQ,"Location Event", " ")
        }
      }
    }
  }
}

' Flows
businessDataChange -d-> enterMDMData :notify
enterMDMData -> mDMUI :enter data
mDMUI -> mDMdb
approveMDMData -u-> mDMUI :approve
mDMdb <- mDMETL
mDMETL -> aFTG :push
fileIngestionPkg -[hidden]- refDataPkg
mDMFileDump -[hidden]- reFDataOpsTeam
mDMFileIngestion -> aFTG :sftp pull
mDMFileIngestion -> mDMCSVBucket
mDMCSVBucket <--> validateMDMFiless
validateMDMFiless --> mDMFileErrors
mDMFileAlert -> mDMCSVBucket
mDMFileAlert -> reFDataOpsTeam
extractCFS -> mDMCSVBucket
queryItem -> mDMCSVBucket
queryItem -d-> itemEventQ
queryLocation -> mDMCSVBucket
queryLocation -d-> locationEventQ

@enduml

